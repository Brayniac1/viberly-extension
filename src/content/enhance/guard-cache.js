// src/content/enhance/guard-cache.js
// Caches guard records for inline suggestion matching.

import { sendRuntimeMessage } from "./runtime.js";

const CACHE_TTL_MS = 5 * 60 * 1000; // 5 minutes
const cache = {
  guards: [],
  fetchedAt: 0,
};

const localStats = new Map();

function normalizeGuard(row) {
  if (!row || typeof row !== "object") return null;
  const tags = Array.isArray(row.tags)
    ? row.tags.filter((tag) => typeof tag === "string" && tag.trim())
    : [];
  const preview =
    typeof row.preview === "string" ? row.preview.trim() : null;
  return {
    id: row.id,
    title: typeof row.title === "string" ? row.title.trim() : "",
    preview,
    body: typeof row.body === "string" ? row.body : "",
    tags,
    siteCategory:
      typeof row.siteCategory === "string" ? row.siteCategory : null,
    config:
      row.config && typeof row.config === "object" ? { ...row.config } : null,
    autoGenerated: Boolean(row.autoGenerated),
    autoSource:
      typeof row.autoSource === "string" ? row.autoSource : null,
    autoVersion:
      typeof row.autoVersion === "number" ? row.autoVersion : 0,
    ownershipType:
      typeof row.ownershipType === "string"
        ? row.ownershipType
        : "personal",
    status: typeof row.status === "string" ? row.status : "inactive",
    visibility:
      typeof row.visibility === "string" ? row.visibility : "private",
    updatedAt: row.updatedAt || null,
    createdAt: row.createdAt || null,
    userModifiedAt: row.userModifiedAt || null,
  };
}

function applyLocalStats(guard) {
  const stats = localStats.get(guard.id);
  if (!stats) {
    return {
      ...guard,
      localUsage: {
        acceptCount: 0,
        rejectCount: 0,
        lastAcceptedAt: 0,
        lastRejectedAt: 0,
        lastShownAt: 0,
      },
    };
  }
  return {
    ...guard,
    localUsage: { ...stats },
  };
}

function updateCache(guards) {
  cache.guards = guards;
  cache.fetchedAt = Date.now();
}

export function recordGuardAcceptance(id) {
  if (!id) return;
  const stats = localStats.get(id) || {
    acceptCount: 0,
    rejectCount: 0,
    lastAcceptedAt: 0,
    lastRejectedAt: 0,
    lastShownAt: 0,
  };
  stats.acceptCount += 1;
  stats.lastAcceptedAt = Date.now();
  localStats.set(id, stats);
}

export function recordGuardRejection(id) {
  if (!id) return;
  const stats = localStats.get(id) || {
    acceptCount: 0,
    rejectCount: 0,
    lastAcceptedAt: 0,
    lastRejectedAt: 0,
    lastShownAt: 0,
  };
  stats.rejectCount += 1;
  stats.lastRejectedAt = Date.now();
  localStats.set(id, stats);
}

export function recordGuardShown(id) {
  if (!id) return;
  const stats = localStats.get(id) || {
    acceptCount: 0,
    rejectCount: 0,
    lastAcceptedAt: 0,
    lastRejectedAt: 0,
    lastShownAt: 0,
  };
  stats.lastShownAt = Date.now();
  localStats.set(id, stats);
}

export async function getGuardCache({ force = false } = {}) {
  const now = Date.now();
  if (
    !force &&
    cache.guards.length &&
    now - cache.fetchedAt < CACHE_TTL_MS
  ) {
    return cache.guards.map(applyLocalStats);
  }

  const resp = await sendRuntimeMessage({
    type: "VG_INTENT_FETCH_GUARDS",
  });

  if (!resp || resp.ok === false) {
    return cache.guards.map(applyLocalStats);
  }

  const guards = Array.isArray(resp.guards)
    ? resp.guards.map(normalizeGuard).filter((guard) => guard && guard.preview)
    : [];

  updateCache(guards);
  return guards.map(applyLocalStats);
}
