<!doctype html>
<meta charset="utf-8" />
<title>Signing you in…</title>
<body style="background:#0f1116;color:#e5e7eb;font:13px system-ui">Signing you in…</body>

<script>
  (function(){
    const params = new URLSearchParams(location.search);
    const DEBUG = params.get('debug') === '1';

    // Log what we actually got back
    try {
      console.log('[auth.html] href:', location.href);
      console.log('[auth.html] search:', location.search);
      console.log('[auth.html] hash:', location.hash);
    } catch {}

    chrome.runtime.sendMessage(
      { type: 'AUTH_REDIRECT', redirectUrl: location.href },
      () => {
        // Try to return focus to the tab the user came from
        chrome.storage.local.get('__vg_return_to', (bag) => {
          const rt = bag && bag.__vg_return_to;
          try { chrome.storage.local.remove('__vg_return_to'); } catch {}

          if (rt && (rt.tabId || rt.url)) {
            try {
              chrome.tabs.get(rt.tabId, (tab) => {
                if (chrome.runtime.lastError || !tab) {
                  if (rt.url) chrome.tabs.create({ url: rt.url });
                } else {
                  chrome.tabs.update(rt.tabId, { active: true });
                  if (tab.windowId) chrome.windows.update(tab.windowId, { focused: true });
                }
              });
            } catch {}
          }
        });

        // Keep tab open in debug mode so you can inspect URL & console
        if (DEBUG) {
          document.body.textContent =
            'Auth redirect (debug mode) — not closing.\n\n' + location.href;
          return;
        }

        // Otherwise, close the tab like before
        setTimeout(() => {
          try { window.close(); } catch {}
          try {
            chrome.tabs.getCurrent((tab) => { if (tab?.id) chrome.tabs.remove(tab.id); });
          } catch {}
        }, 300);
      }
    );
  })();
</script>
